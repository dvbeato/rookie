buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url  "http://dl.bintray.com/dvbeato/maven"
        }
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'nebula.netflixoss' version '3.2.3'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'

    group 'org.rookie'
    version '0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile 'org.yaml:snakeyaml:1.13'
        compile 'commons-lang:commons-lang:2.6'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'org.slf4j:slf4j-api:1.6.2'
        compile 'org.modelmapper:modelmapper:0.7.5'

        testCompile 'org.reflections:reflections:0.9.9-RC1'
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.mockito:mockito-all:1.8.5'
        testCompile 'commons-validator:commons-validator:1.4.1'
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Coverage Reports'
    dependsOn subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}